{"remainingRequest":"C:\\Users\\netdb\\Git\\expert_test\\expert_test\\expert_web_test\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\netdb\\Git\\expert_test\\expert_test\\expert_web_test\\src\\components\\Integration.vue?vue&type=template&id=5dbca9d4&","dependencies":[{"path":"C:\\Users\\netdb\\Git\\expert_test\\expert_test\\expert_web_test\\src\\components\\Integration.vue","mtime":1666341512964},{"path":"C:\\Users\\netdb\\Git\\expert_test\\expert_test\\expert_web_test\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1662543709072},{"path":"C:\\Users\\netdb\\Git\\expert_test\\expert_test\\expert_web_test\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":1662543737465},{"path":"C:\\Users\\netdb\\Git\\expert_test\\expert_test\\expert_web_test\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1662543709072},{"path":"C:\\Users\\netdb\\Git\\expert_test\\expert_test\\expert_web_test\\node_modules\\vue-loader\\lib\\index.js","mtime":1662543737457}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}